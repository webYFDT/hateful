# -*- coding: utf-8 -*-import torchimport torchvision.models as modelsfrom torch.utils.data import  Dataset,DataLoaderimport torchvision.transforms as transformsimport osfrom PIL import Imageimport pickleimport pandas as pdfrom torch.hub import load_state_dict_from_urlimport tqdm#print(len(imgs))#2048#restnet101  1000#restnet152  conv5_x 最后一层是1x1x2048class BatchData(Dataset):    def __init__(self,imgs,file_path):        self.file_path=file_path        self.imgs=imgs    def __len__(self):        return len(self.imgs)    def __getitem__(self,idx):        img_name = self.imgs[idx]        img_path=self.file_path+img_name        torch_img=self.transfor_img(img_path)        img_id=img_name.split('.')[0]        img_info={'id':img_id,'torch_img':torch_img}        return img_info    def transfor_img(self,img_path):        mode = Image.open(img_path).convert('RGB')        transform1 = transforms.Compose([            transforms.Resize((256,256)),            transforms.CenterCrop(224),            transforms.ToTensor(),            transforms.Normalize(mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225])        ])            torch_img = transform1(mode)        mode.close()        return torch_imgfile_path='/root/.cache/torch/mmf/data/datasets/hateful_memes/defaults/images/img/'imgs=os.listdir(file_path)  dataset=BatchData(imgs,file_path)dataloader=DataLoader(dataset,batch_size=100)class restnet152_modify(models.resnet.ResNet):    def __init__(self,num_classes=1000,pretrained=True, **kwargs):        super().__init__(block=models.resnet.Bottleneck,layers= [3, 8, 36, 3],num_classes=num_classes,**kwargs)        if pretrained:            state_dict = load_state_dict_from_url(models.resnet.model_urls['resnet152'],                                              progress=True)        self.load_state_dict(state_dict)    def _forward_impl(self, x):        # See note [TorchScript super()]        x = self.conv1(x)        x = self.bn1(x)        x = self.relu(x)        x = self.maxpool(x)        x = self.layer1(x)        x = self.layer2(x)        x = self.layer3(x)        x = self.layer4(x)        x = self.avgpool(x)        x = torch.flatten(x, 1)        #x = self.fc(x)        return x               model= restnet152_modify()device=torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')model=model.to(device)model.eval()img_feature_info={}for i,img_info in tqdm.tqdm(enumerate(dataloader)):    img_id=img_info['id']    img_torch=img_info['torch_img']    img_torch=img_torch.to(device)    with torch.set_grad_enabled(False):        img_feature=model(img_torch)        img_feature=img_feature.to('cpu')        for j in range(len(img_id)):            img_feature_info[img_id[j]]=img_feature[j]file= open('img_feature.pkl','wb')pickle.dump(img_feature_info, file)file.close()